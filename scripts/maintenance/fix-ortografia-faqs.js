#!/usr/bin/env node

/**
 * Fix Ortograf√≠a en FAQs
 * 
 * Revisa y corrige errores ortogr√°ficos en preguntas y respuestas,
 * especialmente acentos y tildes
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.join(__dirname, '../..');

dotenv.config({ path: path.join(rootDir, '.env') });

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

console.log('‚úçÔ∏è  REVISI√ìN ORTOGR√ÅFICA DE FAQs\n');
console.log('=' .repeat(70));

// Diccionario de correcciones comunes
const correcciones = {
  // Palabras interrogativas (SIEMPRE llevan tilde)
  'que ': 'qu√© ',
  'como ': 'c√≥mo ',
  'cuando ': 'cu√°ndo ',
  'donde ': 'd√≥nde ',
  'cual ': 'cu√°l ',
  'cuales ': 'cu√°les ',
  'quien ': 'qui√©n ',
  'quienes ': 'qui√©nes ',
  'cuanto ': 'cu√°nto ',
  'cuanta ': 'cu√°nta ',
  'cuantos ': 'cu√°ntos ',
  'cuantas ': 'cu√°ntas ',
  
  // Palabras comunes con tilde
  'mas ': 'm√°s ',
  'esta ': 'est√° ',
  'estas ': 'est√°s ',
  'estan ': 'est√°n ',
  'sera ': 'ser√° ',
  'seran ': 'ser√°n ',
  'podria ': 'podr√≠a ',
  'podrian ': 'podr√≠an ',
  'deberia ': 'deber√≠a ',
  'deberian ': 'deber√≠an ',
  'tambien': 'tambi√©n',
  'ademas': 'adem√°s',
  'despues': 'despu√©s',
  'dificil': 'dif√≠cil',
  'facil': 'f√°cil',
  'util': '√∫til',
  'rapido': 'r√°pido',
  'rapida': 'r√°pida',
  'matematica': 'matem√°tica',
  'matematicas': 'matem√°ticas',
  'fisica': 'f√≠sica',
  'quimica': 'qu√≠mica',
  'biologia': 'biolog√≠a',
  'tecnologia': 'tecnolog√≠a',
  'informacion': 'informaci√≥n',
  'inscripcion': 'inscripci√≥n',
  'inscripciones': 'inscripciones',
  'admision': 'admisi√≥n',
  'educacion': 'educaci√≥n',
  'academico': 'acad√©mico',
  'academica': 'acad√©mica',
  'practicas': 'pr√°cticas',
  'practica': 'pr√°ctica',
  'credito': 'cr√©dito',
  'creditos': 'cr√©ditos',
  'examen': 'examen',
  'examenes': 'ex√°menes',
  'pagina': 'p√°gina',
  'numero': 'n√∫mero',
  'telefono': 'tel√©fono',
  'electronica': 'electr√≥nica',
  'robotica': 'rob√≥tica',
  'ciberseguridad': 'ciberseguridad',
  'petroquimica': 'petroqu√≠mica',
  'nanotecnologia': 'nanotecnolog√≠a',
  'biotecnologia': 'biotecnolog√≠a',
  'oceanologia': 'oceanolog√≠a',
  'filosofia': 'filosof√≠a',
  'indice': '√≠ndice',
  'calculo': 'c√°lculo',
  'algebra': '√°lgebra',
  'logica': 'l√≥gica',
  'optica': '√≥ptica',
  'atomica': 'at√≥mica',
  'atomico': 'at√≥mico',
  'electrica': 'el√©ctrica',
  'electrico': 'el√©ctrico',
  'mecanica': 'mec√°nica',
  'mecanico': 'mec√°nico',
  'organica': 'org√°nica',
  'organico': 'org√°nico',
  'inorganica': 'inorg√°nica',
  'basica': 'b√°sica',
  'basico': 'b√°sico',
  'especifica': 'espec√≠fica',
  'especifico': 'espec√≠fico',
  'unico': '√∫nico',
  'unica': '√∫nica',
  'publico': 'p√∫blico',
  'publica': 'p√∫blica',
  'medico': 'm√©dico',
  'medica': 'm√©dica',
  'clinico': 'cl√≠nico',
  'clinica': 'cl√≠nica',
  'cientifico': 'cient√≠fico',
  'cientifica': 'cient√≠fica',
  'tecnico': 't√©cnico',
  'tecnica': 't√©cnica',
  'practico': 'pr√°ctico',
  'teorico': 'te√≥rico',
  'teorica': 'te√≥rica',
  'economico': 'econ√≥mico',
  'economica': 'econ√≥mica',
  'historico': 'hist√≥rico',
  'historica': 'hist√≥rica',
  'codigo': 'c√≥digo',
  'periodo': 'per√≠odo',
  'semestre': 'semestre',
  'area': '√°rea',
  'areas': '√°reas',
  'dia': 'd√≠a',
  'dias': 'd√≠as',
  'ahi': 'ah√≠',
  'asi': 'as√≠',
  'solo': 's√≥lo',
  'si ': 's√≠ ',
  'tu ': 't√∫ ',
  'el ': '√©l ',
  'mi ': 'm√≠ ',
  'te ': 't√© ',
  'se ': 's√© ',
  'de ': 'd√© '
};

// Funci√≥n para corregir texto
function corregirTexto(texto) {
  if (!texto) return texto;
  
  let textoCorregido = texto.toLowerCase();
  
  // Aplicar correcciones
  for (const [incorrecto, correcto] of Object.entries(correcciones)) {
    const regex = new RegExp(incorrecto, 'gi');
    textoCorregido = textoCorregido.replace(regex, correcto);
  }
  
  return textoCorregido;
}

// Funci√≥n para verificar si necesita correcci√≥n
function necesitaCorreccion(texto) {
  const textoCorregido = corregirTexto(texto);
  return texto.toLowerCase() !== textoCorregido;
}

async function revisarYCorregirFAQs() {
  console.log('\nüìñ Obteniendo todas las FAQs...\n');
  
  // Obtener todas las FAQs
  const { data: faqs, error } = await supabase
    .from('faqs')
    .select('*')
    .eq('is_active', true);
  
  if (error) {
    console.error('‚ùå Error al obtener FAQs:', error.message);
    process.exit(1);
  }
  
  console.log(`‚úÖ ${faqs.length} FAQs encontradas\n`);
  console.log('üîç Revisando ortograf√≠a...\n');
  
  const faqsParaCorregir = [];
  
  for (const faq of faqs) {
    const necesitaCorreccionPregunta = necesitaCorreccion(faq.question);
    const necesitaCorreccionRespuesta = necesitaCorreccion(faq.answer);
    
    if (necesitaCorreccionPregunta || necesitaCorreccionRespuesta) {
      faqsParaCorregir.push({
        id: faq.id,
        questionOriginal: faq.question,
        questionCorregida: corregirTexto(faq.question),
        answerOriginal: faq.answer,
        answerCorregida: corregirTexto(faq.answer),
        necesitaCorreccionPregunta,
        necesitaCorreccionRespuesta
      });
    }
  }
  
  console.log('=' .repeat(70));
  console.log(`\nüìä RESULTADOS:\n`);
  console.log(`   Total FAQs revisadas: ${faqs.length}`);
  console.log(`   FAQs con errores: ${faqsParaCorregir.length}`);
  console.log(`   FAQs correctas: ${faqs.length - faqsParaCorregir.length}\n`);
  
  if (faqsParaCorregir.length === 0) {
    console.log('‚úÖ ¬°Todas las FAQs tienen ortograf√≠a correcta!\n');
    return;
  }
  
  console.log('=' .repeat(70));
  console.log('\n‚ö†Ô∏è  FAQs CON ERRORES ORTOGR√ÅFICOS:\n');
  
  // Mostrar primeras 10 FAQs con errores
  const muestras = faqsParaCorregir.slice(0, 10);
  
  for (let i = 0; i < muestras.length; i++) {
    const faq = muestras[i];
    console.log(`\n${i + 1}. FAQ ID: ${faq.id}`);
    
    if (faq.necesitaCorreccionPregunta) {
      console.log(`   ‚ùå Pregunta: "${faq.questionOriginal}"`);
      console.log(`   ‚úÖ Corregida: "${faq.questionCorregida}"`);
    }
    
    if (faq.necesitaCorreccionRespuesta) {
      console.log(`   ‚ùå Respuesta: "${faq.answerOriginal.substring(0, 80)}..."`);
      console.log(`   ‚úÖ Corregida: "${faq.answerCorregida.substring(0, 80)}..."`);
    }
  }
  
  if (faqsParaCorregir.length > 10) {
    console.log(`\n   ... y ${faqsParaCorregir.length - 10} FAQs m√°s con errores\n`);
  }
  
  console.log('\n' + '=' .repeat(70));
  console.log('\n‚ö†Ô∏è  IMPORTANTE: Este script solo DETECTA errores.');
  console.log('Para CORREGIR autom√°ticamente, ejecuta:');
  console.log('   node scripts/maintenance/apply-ortografia-fixes.js\n');
  
  // Guardar reporte
  const reporte = {
    fecha: new Date().toISOString(),
    totalFAQs: faqs.length,
    faqsConErrores: faqsParaCorregir.length,
    faqsCorrectas: faqs.length - faqsParaCorregir.length,
    errores: faqsParaCorregir
  };
  
  console.log('üíæ Guardando reporte en: ortografia-report.json\n');
  
  const fs = await import('fs');
  fs.writeFileSync(
    path.join(rootDir, 'ortografia-report.json'),
    JSON.stringify(reporte, null, 2)
  );
  
  console.log('‚úÖ Reporte guardado exitosamente\n');
}

revisarYCorregirFAQs()
  .then(() => process.exit(0))
  .catch(error => {
    console.error('\n‚ùå Error:', error.message);
    process.exit(1);
  });
