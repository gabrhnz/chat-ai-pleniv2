#!/usr/bin/env node

/**
 * Fix Bot Presentation - Community Project
 *
 * Agrega FAQs que aclaran que el bot es un proyecto comunitario
 * NO es oficial de la universidad
 */

import { createClient } from '@supabase/supabase-js';
import * as embeddingsLocal from '../src/services/embeddings.service.js';
import * as embeddingsCloud from '../src/services/embeddings.service.cloud.js';
import config from '../src/config/environment.js';
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.join(__dirname, '..');

dotenv.config({ path: path.join(rootDir, '.env') });

const embeddingsService = config.server.isProduction ? embeddingsCloud : embeddingsLocal;
const { generateEmbeddingsBatch } = embeddingsService;

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

// FAQs sobre presentaci√≥n del bot
const botPresentationFAQs = [
  {
    question: "que eres",
    answer: "Soy una IA creada por la comunidad para ayudar a estudiantes interesados en la UNC. No tengo relaci√≥n oficial con la universidad - soy un proyecto comunitario que proporciona informaci√≥n basada en datos p√∫blicos. ü§ñüí¨",
    category: "general",
    keywords: ["que eres", "quien eres", "que bot"]
  },
  {
    question: "eres oficial de la universidad",
    answer: "No, no soy oficial de la UNC. Soy un proyecto comunitario creado por estudiantes y miembros de la comunidad para ayudar a otros estudiantes con informaci√≥n sobre la universidad. Toda la informaci√≥n que doy viene de fuentes p√∫blicas. ü§ñüí¨",
    category: "general",
    keywords: ["oficial", "universidad", "representante"]
  },
  {
    question: "quien te creo",
    answer: "Fui creado por la comunidad estudiantil como un proyecto colaborativo para ayudar a estudiantes interesados en la UNC. No soy parte de la administraci√≥n universitaria oficial. ü§ñüí¨",
    category: "general",
    keywords: ["quien te creo", "creado por", "desarrollado por"]
  },
  {
    question: "eres parte de la unc",
    answer: "No, no soy parte oficial de la UNC. Soy un proyecto independiente de la comunidad que ayuda con informaci√≥n sobre la universidad. Proporciono datos basados en fuentes p√∫blicas disponibles. ü§ñüí¨",
    category: "general",
    keywords: ["parte unc", "oficial", "perteneces"]
  },
  {
    question: "hola",
    answer: "¬°Hola! Soy una IA creada por la comunidad para ayudarte con informaci√≥n sobre la Universidad Nacional de las Ciencias (UNC). No soy oficial de la universidad, solo un proyecto comunitario √∫til. ¬øEn qu√© te puedo ayudar? ü§ñüí¨",
    category: "general",
    keywords: ["hola", "saludos", "buenos dias"]
  },
  {
    question: "buenos dias",
    answer: "¬°Buenos d√≠as! Soy un asistente comunitario sobre la UNC, creado por estudiantes para estudiantes. No soy parte oficial de la universidad. ¬øQu√© informaci√≥n necesitas? ü§ñüí¨",
    category: "general",
    keywords: ["buenos dias", "buenas tardes", "buenas noches"]
  },
  {
    question: "que haces",
    answer: "Ayudo con informaci√≥n sobre la UNC basada en datos p√∫blicos. Respondo preguntas sobre carreras, admisi√≥n, costos, instalaciones, etc. Soy un proyecto comunitario, no oficial de la universidad. ü§ñüí¨",
    category: "general",
    keywords: ["que haces", "funciones", "ayudas"]
  },
  {
    question: "de donde vienes",
    answer: "Soy un proyecto creado por la comunidad estudiantil venezolana para ayudar a otros estudiantes interesados en la UNC. No tengo relaci√≥n oficial con la universidad. ü§ñüí¨",
    category: "general",
    keywords: ["origen", "de donde", "creado"]
  }
];

async function fixBotPresentation() {
  console.log('ü§ñ CORRIGIENDO PRESENTACI√ìN DEL BOT - PROYECTO COMUNITARIO\n');
  console.log('=' .repeat(70));
  console.log('‚ùå PROBLEMA IDENTIFICADO:');
  console.log('   Bot se presentaba como "asistente UNC"');
  console.log('   Pod√≠a confundirse con oficial de universidad\n');

  console.log('‚úÖ SOLUCI√ìN: Presentaci√≥n clara como proyecto comunitario\n');

  // Buscar y eliminar FAQs err√≥neas existentes
  console.log('üóëÔ∏è Buscando FAQs err√≥neas sobre presentaci√≥n del bot...');

  const { data: existingFAQs } = await supabase
    .from('faqs')
    .select('id, question, answer')
    .or('question.ilike.%que eres%,question.ilike.%quien eres%,question.ilike.%hola%,question.ilike.%oficial%');

  if (existingFAQs && existingFAQs.length > 0) {
    console.log(`üìã Encontradas ${existingFAQs.length} FAQs existentes`);
    for (const faq of existingFAQs) {
      console.log(`   Eliminando: "${faq.question}"`);

      await supabase
        .from('faqs')
        .delete()
        .eq('id', faq.id);
    }
    console.log('‚úÖ FAQs err√≥neas eliminadas\n');
  } else {
    console.log('‚ÑπÔ∏è No se encontraron FAQs existentes sobre presentaci√≥n\n');
  }

  // Agregar FAQ correcta
  console.log('üìù Agregando FAQs correctas sobre presentaci√≥n del bot...');

  const embeddings = await generateEmbeddingsBatch(botPresentationFAQs.map(faq => faq.question));

  const faqsToInsert = botPresentationFAQs.map((faq, idx) => ({
    question: faq.question,
    answer: faq.answer,
    category: faq.category,
    keywords: faq.keywords,
    metadata: {
      source: 'bot-presentation-community-project',
      added_at: new Date().toISOString(),
      type: 'bot-identity-correction',
      priority: 'critical',
      bot_presentation: true
    },
    embedding: embeddings[idx],
    created_by: 'bot-presentation-fix',
    is_active: true,
  }));

  const { data, error } = await supabase
    .from('faqs')
    .insert(faqsToInsert)
    .select();

  if (error) {
    console.error('‚ùå Error agregando FAQs:', error.message);
    process.exit(1);
  }

  console.log('‚úÖ FAQs AGREGADAS\n');

  console.log('üéØ PRESENTACI√ìN CORRECTA AHORA DISPONIBLE:');
  console.log('   ‚úÖ "Soy una IA creada por la comunidad"');
  console.log('   ‚úÖ "No tengo relaci√≥n oficial con la universidad"');
  console.log('   ‚úÖ "Proyecto comunitario para estudiantes"');
  console.log('   ‚ùå NO "Asistente oficial de la UNC"');
  console.log('   ‚ùå NO "Parte de los recursos de la universidad"\n');

  // Verificar que se agreg√≥ correctamente
  console.log('üîç Verificando inserci√≥n...');
  const { data: verifyFAQ } = await supabase
    .from('faqs')
    .select('question, answer')
    .eq('question', botPresentationFAQs[0].question)
    .single();

  if (verifyFAQ) {
    console.log('‚úÖ FAQ verificada correctamente\n');
  }

  console.log('üß™ PRUEBA RECOMENDADA:');
  console.log('   curl -X POST http://localhost:3000/api/chat \\');
  console.log('     -H "Content-Type: application/json" \\');
  console.log('     -d \'{"message": "hola", "sessionId": "bot-presentation-test"}\'\n');

  console.log('‚ú® BOT AHORA SE PRESENTA CORRECTAMENTE COMO PROYECTO COMUNITARIO');
  console.log('=' .repeat(70));
}

fixBotPresentation().catch(console.error);
